<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on 梦溪笔谈</title>
    <link>http://loongmxbt.github.io/categories/web/</link>
    <description>Recent content in Web on 梦溪笔谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright (c) 2014 - 2015, Saint Asky; all rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Mar 2015 10:58:33 +0800</lastBuildDate>
    <atom:link href="http://loongmxbt.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>国内部署服务器环境被墙解决方案</title>
      <link>http://loongmxbt.github.io/post/server-deploy-break-wall/</link>
      <pubDate>Sun, 15 Mar 2015 10:58:33 +0800</pubDate>
      
      <guid>http://loongmxbt.github.io/post/server-deploy-break-wall/</guid>
      <description>

&lt;h3 id=&#34;服务器部署问题:1b8e73342e272a8138ea300a0cc66545&#34;&gt;服务器部署问题&lt;/h3&gt;

&lt;p&gt;在国内服务器部署时，通常会遇到源被墙等问题，通常只是 GFW 的无差别 DNS 污染造成的，和域名屏蔽 IP 封锁还是不一样的，所以通常可以通过修改本机或服务器的 DNS 地址来解决。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;11:04:40.741350 host.go:130: tuf: failed to download v1/images/ceb6da07e96d7c6e732af955c9b6f64618b4c3a3cf7c7b2a7cdad07e8af227b3/layer: read tcp 54.230.159.50:443: connection reset by peer
===&amp;gt; 11:04:40.778 ERROR: failed to run &amp;quot;/usr/local/bin/flynn-host download --repository https://dl.flynn.io/tuf --tuf-db /etc/flynn/tuf.db --config-dir /etc/flynn --bin-dir /usr/local/bin&amp;quot;, exit status 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应该是网络问题，每次中断处不一样。&lt;/p&gt;

&lt;h3 id=&#34;百度公共-dns:1b8e73342e272a8138ea300a0cc66545&#34;&gt;百度公共 DNS&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;以下设置对所用的Linux系统如 Redhat/Ubuntu/Debian/CentOS 等都有效，但您必须是管理员 root 或者具有管理员权限&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;在其中加入:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;nameserver 180.76.76.76
nameserver 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;保存退出，使用 nslookup 或者 dig 验证是否可以通过 &lt;code&gt;180.76.76.76&lt;/code&gt; 正常解析 &lt;code&gt;www.baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;更改镜像源:1b8e73342e272a8138ea300a0cc66545&#34;&gt;更改镜像源&lt;/h3&gt;

&lt;p&gt;大部分开源软件镜像在淘宝上都有相应的国内镜像源，可以修改程序镜像源的地址来实现部署。&lt;/p&gt;

&lt;p&gt;比如 rails 开发可以设置 &lt;code&gt;http://ruby.taobao.org&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;反向代理至国外服务器:1b8e73342e272a8138ea300a0cc66545&#34;&gt;反向代理至国外服务器&lt;/h3&gt;

&lt;h3 id=&#34;使用-proxychains-执行命令:1b8e73342e272a8138ea300a0cc66545&#34;&gt;使用 proxychains 执行命令&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>docker wordpress 使用教程</title>
      <link>http://loongmxbt.github.io/post/using-docker-wordpress/</link>
      <pubDate>Sat, 07 Mar 2015 11:20:23 +0800</pubDate>
      
      <guid>http://loongmxbt.github.io/post/using-docker-wordpress/</guid>
      <description>

&lt;h3 id=&#34;docker-wordpress-简介:cfa88cc7f5481a5e1b41baa6b0675a10&#34;&gt;docker wordpress 简介&lt;/h3&gt;

&lt;p&gt;这里使用的是 Github 上 stars 数最多的 Dockfile &lt;a href=&#34;https://github.com/eugeneware/docker-wordpress-nginx&#34;&gt;docker-wordpress-nginx&lt;/a&gt;，它将 nginx, mysql, php-apc, php-fpm, wordpress 等 LNMP 基础软件安装在同一个镜像中。&lt;/p&gt;

&lt;h3 id=&#34;安装方法:cfa88cc7f5481a5e1b41baa6b0675a10&#34;&gt;安装方法&lt;/h3&gt;

&lt;p&gt;最简单的安装方式是从 Docker registry 上 pull 这个镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull eugeneware/docker-wordpress-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以下载相应文件自己安装镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/eugeneware/docker-wordpress-nginx.git
$ cd docker-wordpress-nginx
$ sudo docker build -t=&amp;quot;docker-wordpress-nginx&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用方法:cfa88cc7f5481a5e1b41baa6b0675a10&#34;&gt;使用方法&lt;/h3&gt;

&lt;p&gt;创建一个 wordpress 新实例并绑定 80 端口。&lt;code&gt;-p 80:80&lt;/code&gt; 将 container 内部的 80 端口和外部宿主机的 80 端口映射起来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker run -p 80:80 --name docker-wordpress-nginx -d docker-wordpress-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开启你创建的 docker。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker start docker-wordpress-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在开启 &lt;code&gt;docker-wordpress-nginx&lt;/code&gt; 之后，检查端口是否正确对应。这也能显示 docker 容器和宿主机的端口映射情况。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker ps

0.0.0.0:80 -&amp;gt; 80/tcp docker-wordpress-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以通过如下 URL 访问 wordpress：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://127.0.0.1:80
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;绑定域名:cfa88cc7f5481a5e1b41baa6b0675a10&#34;&gt;绑定域名&lt;/h3&gt;

&lt;p&gt;假如你的虚拟机上只有一个 container，并想绑定相应域名和 IP，则你需要事先修改 &lt;code&gt;nginx-site.conf&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;将其中的 &lt;code&gt;server_name localhost;&lt;/code&gt; 修改成 &lt;code&gt;server_name your_domain;&lt;/code&gt;。 然后 build 这个 docker image。&lt;/p&gt;

&lt;h3 id=&#34;ssh-连接:cfa88cc7f5481a5e1b41baa6b0675a10&#34;&gt;ssh 连接&lt;/h3&gt;

&lt;p&gt;使用 &lt;a href=&#34;https://github.com/jpetazzo/nsenter&#34;&gt;nsenter&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;新版本 docker 可以使用命令 &lt;code&gt;docker exec -it bash&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Hugo 搭建 Github 静态博客</title>
      <link>http://loongmxbt.github.io/post/build-github-blog-by-Hugo/</link>
      <pubDate>Wed, 04 Mar 2015 11:21:04 +0800</pubDate>
      
      <guid>http://loongmxbt.github.io/post/build-github-blog-by-Hugo/</guid>
      <description>

&lt;h3 id=&#34;github-静态博客是啥:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;Github 静态博客是啥&lt;/h3&gt;

&lt;p&gt;自从 Github 推出 Pages 服务以来，静态博客程序就层出不穷。所谓『静态博客』，就是所有页面均为 HTML 静态页面的博客。与常见的 Wordpress 等动态博客系统不同，它没有数据库，没有动态语言，没有复杂的后台管理。静态博客有着轻量、快捷、安全等优势，配合以 Git 版本控制系统与 Github 托管服务，使写作更为方便流畅。&lt;/p&gt;

&lt;p&gt;常见的静态博客系统有 &lt;a href=&#34;https://github.com/jekyll/jekyll&#34;&gt;Jekyll&lt;/a&gt; (Ruby)，&lt;a href=&#34;https://github.com/imathis/octopress&#34;&gt;Octopress&lt;/a&gt; (Ruby)，&lt;a href=&#34;https://github.com/hexojs/hexo&#34;&gt;Hexo&lt;/a&gt; (Node.js)等，更多的系统请参见&lt;a href=&#34;http://www.chinaz.com/special/static-blog/index.html&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;静态博客程序通常使用 &lt;a href=&#34;http://wowubuntu.com/markdown/basic.html&#34;&gt;Markdown&lt;/a&gt; 格式编辑页面和文章，然后通过程序生成 HTML 静态页面，通过 Git 命令推送至 Github 上，由 &lt;code&gt;username.github.io&lt;/code&gt; 子域名进行访问。&lt;/p&gt;

&lt;h3 id=&#34;hugo-是啥:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;Hugo 是啥&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 是基于 Go 语言的静态博客系统。&lt;/p&gt;

&lt;h3 id=&#34;安装-hugo:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;安装 Hugo&lt;/h3&gt;

&lt;p&gt;Hugo 的安装非常简单，只要下载对应系统的可执行文件即可，点击&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;这里&lt;/a&gt;下载，下载完成后添加至 &lt;code&gt;PATH&lt;/code&gt; 即可。如果你是 Mac 用户并使用 &lt;code&gt;homebrew&lt;/code&gt; 只需执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;本地搭建:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;本地搭建&lt;/h3&gt;

&lt;p&gt;创建页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建文章：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载全部主题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载单个主题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir themes
$ cd themes
$ git clone URL_TO_THEME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行 Hugo：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server --theme=hyde --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server -t nofancy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，默认创建的文章页面有 &lt;code&gt;draft=true&lt;/code&gt; 选项，设置为 false 才可以不通过 &lt;code&gt;--buildDrafts&lt;/code&gt; 选项生成。&lt;/p&gt;

&lt;h3 id=&#34;部署至-github:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;部署至 Github&lt;/h3&gt;

&lt;p&gt;在 Github 上搭建个人博客需要注意两点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你必须使用 &lt;code&gt;username.github.io&lt;/code&gt; 创建 repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; 分支下的内容将被用来搭建发布 Github Pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们将创建两个 repo，一个用来存放 Hugo 的内容，一个 git 子模块存放 &lt;code&gt;public&lt;/code&gt; 的内容。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建 GitHub &lt;code&gt;&amp;lt;your-project&amp;gt;-hugo&lt;/code&gt; 仓库 (它将存储 Hugo 的内容，注意将 &lt;code&gt;public&lt;/code&gt; 目录添加至 &lt;code&gt;.gitignore&lt;/code&gt; 中)&lt;/li&gt;
&lt;li&gt;创建 GitHub &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; 仓库 (它将存储 &lt;code&gt;public&lt;/code&gt; 文件夹: 即网站的静态版本)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;&amp;lt;your-project&amp;gt;-hugo-url&amp;gt; &amp;amp;&amp;amp; cd &amp;lt;your-project&amp;gt;-hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在本地运行网站 (&lt;code&gt;hugo server --watch -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;如果你对结果满意, &lt;code&gt;Ctrl+C&lt;/code&gt; (kill server) and &lt;code&gt;rm -rf public&lt;/code&gt; (别着急，你可以通过 &lt;code&gt;hugo -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt; 重新生成)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基本完成: 创建 &lt;code&gt;deploy.sh&lt;/code&gt; 脚本实现自动化管理 (别忘了给它可执行权限: &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;增加代码高亮支持:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;增加代码高亮支持&lt;/h3&gt;

&lt;p&gt;将以下代码添加至 &lt;code&gt;themes/theme-name/layouts/partials/headerer.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;增加数学公式支持:f335be6568e4945d1f62056ad1d6d66b&#34;&gt;增加数学公式支持&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/&#34;&gt;这篇文章&lt;/a&gt;有详细的 MathJax 和 LaTeX 简介。&lt;/p&gt;

&lt;p&gt;将以下代码添加至 &lt;code&gt;themes/theme-name/layouts/partials/footer.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;
  src=&amp;quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
  MathJax.Hub.Queue(function() {
    // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &amp;lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增加相应的 css&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;code.has-jax {
    font: inherit;
    font-size: 100%;
    background: inherit;
    border: inherit;
    color: #515151;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;p&gt;若 Markdown 语法与 MathJax 语法冲突时，对于 inline 公式，可以在原先两个&lt;code&gt;$&lt;/code&gt;之外加上两个&lt;code&gt;`&lt;/code&gt;代表 code。对于 display 公式，可以在原先两个&lt;code&gt;$$&lt;/code&gt;之外加上&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;。这样所有的公式就可以仅执行 MathJax 解析了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>